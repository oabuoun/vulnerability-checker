# import vulners
import requests
import json
from bs4 import BeautifulSoup
import configparser


class VulnGatherer():
    def __init__(self):
        def read_password_policy(self):
            # reads in password policy, returns variables as a list. Written by KW
            # password_policy = open('password_policy.txt', 'r')
            policy = configparser.ConfigParser()
            policy.read('api_keys.txt')
            vulners_api = policy.getint('API', 'vulners')
            vulndb_api = policy.getint('API', 'vuldb')


    def vulners_com(self, search_term):
        vulners_api = vulners.Vulners(api_key=vulners_api)

        search_results = vulners_api.search(search_term, limit=10)
        # list = heartbleed_related]
        #print(type(heartbleed_related))
        # print(list.keys())
        # choice = input()
        cve_list = []
        description_list = []
        for items in search_results:
            # print(items.keys())
            cve_list.append(items["cvelist"])
            description_list.append(items["description"])
            # print(items["cvelist"])
            # print(items["description"])

        return cve_list, description_list

    def CVE_org(self, search_term):
        getpage = requests.get("https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=" + search_term)
        getpage_soup = BeautifulSoup(getpage.text, 'html.parser')

        info = getpage_soup.find("div",{"id":"TableWithRules"})
        page_list = []
        for i in info.findAll("td"):
            #print(i.text)
            page_list.append(i.text)
        y = 0
        cve_list = []
        description_list = []
        try:
            for i in page_list:
                cve_list.append(page_list[y])#All even numbers are the CVE numbers

                y += 1
                description_list.append(page_list[y])# The Odd numbers in the list are the descibtions of the previous CVE number
                y += 1

            return cve_list, description_list
        except IndexError:# If the number of vulns are low it can create an error this catches the error and returns what it has
            return cve_list, description_list


# if __name__ == "__main__":
#     two_lists = VulnGatherer().CVE_org("windows 10")
#     CVEs = two_lists[0]
#     descr = two_lists[1]
#     print(CVEs[4])
#     print(descr[4])
#
#     two_lists = VulnGatherer().vulners_com("Windows 11")
#     CVEs = two_lists[0]
#     descr = two_lists[1]
#     print(CVEs[4])
#     print(descr[4])
