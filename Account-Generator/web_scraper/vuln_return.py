from vuln_gatherer import VulnGatherer
from vuln_db import VulnDB
# from component_manager import ComponentManager

class VulnReturn():
    # Takes a list of comonents and checks each one for most recent CVE
    # Function component_manager.py componentManager lookup_component
    # returns entire table comp_type, comp_version, comp_name


    #Run all vuln gathers and returns the lists
    #
    # def vuln_lists(self, search_term):
    #     VG = VulnGatherer()
    #     vuln_list1 = VG.vulners_com(search_term)
    #     vuln_list2 = VG.CVE_org(search_term)
    #     return vuln_list1, vuln_list2

    def return_recent_CVE(self, search_term):
#        try:
        VG = VulnGatherer()
        two_lists = VG.CVE_org(search_term)
        CVEs = two_lists[0]
        return CVEs[0]
    # except:
            # return "No results have been found"

    def return_recent_description(self, search_term):
        # try:
        VG = VulnGatherer()
        two_lists = VulnGatherer().CVE_org(search_term)
        description = two_lists[1]
        return description[0]
        # except:
        #     return "No results have been found"
    # borrow check estistence & create user functions if it isn't in the DBB add it
    # check CVE number for new update
    #
    # Making sure not to print the same CVE from different sources
    def recent_vuln_db(self, search_term):
        # print(search_term)
        recent_cve = self.return_recent_CVE(search_term)
        recent_description = self.return_recent_description(search_term)
        return VulnDB().add_new_vuln(recent_cve, recent_description)

    # def comp_to_vuln():# takes the information in comp DB and put in a format to be put into a search
    #     CM = ComponentManager()
    #     comp_db = CM.lookup_component()
    #     comp_type_list=[]
    #     comp_version_list =[]
    #     comp_name_list=[]
    #
    #     for item in comp_db:
    #         comp_type_list.append(item["comp_type"])
    #         comp_version_list.append(item["comp_version"])
    #         comp_name_list.append(item["comp_name"])
    #
    #     search_term = comp_name_list[0] + comp_version_list[0]
    #     self.recent_vuln_db(search_term)

    def list_vuln_search(self, list):#takes in a list of components to search through
        for item in list:
            self.recent_vuln_db(item)
            #print(item)

#
list_comp = ["java", "Python 3.9", "Windows 10", "cisco", "dell"]
print(VulnReturn().list_vuln_search(list_comp))
# print(VulnReturn().recent_vuln_db("java"))
# print(VulnReturn().return_recent_CVE("kali"))
# print(VulnReturn().return_recent_description("kali"))
