from flask import Flask, request, abort, redirect, url_for, render_template, jsonify, make_response, flash
from token_manager import TokenManager
from flask_recaptcha import ReCaptcha
# Token imports
import jwt
from pprint import pprint
# System imports
from datetime import datetime, timedelta

from user_account_details import UserAccountDetails
from component_manager import ComponentManager
import decorators

app = Flask(__name__)
app.config['RECAPTCHA_SITE_KEY'] = '6LdgX8YbAAAAAFDFtUnemQDFIe9K9MHS26maiPH0'
app.config['RECAPTCHA_SECRET_KEY'] = '6LdgX8YbAAAAAAhL_RbULR-QCtauPBaAYx4I94zc'
recaptcha = ReCaptcha(app)
def manager_token(token):
    #decode token, read manager field, return True or False depending on outcome.
    decoded_token = jwt.decode(token, 'SECRET_KEY_123456798', 'HS256')
    if decoded_token['Manager'] == 'yes':
        print("you are a manager")
        return True
    else:
        print("you are not a manager")
        return False

@app.route('/',methods = ['POST', 'GET'])
def welcome():
    return render_template("index.html")


@app.route('/register',methods = ['POST', 'GET'])
@decorators.manager_token_required
def register():
    if request.method == 'GET':
        return render_template("register.html")

    first_name = request.form.get('fname')
    last_name = request.form.get('lname')
    birth_year = request.form.get('year')
    user_name = request.form.get('username')
    password = request.form.get('pwd')

    new_user = UserAccountDetails()
    message = new_user.create_new_user(user_name, first_name, last_name, birth_year, password)

    return render_template("management_options.html",message=message)


@app.route('/login', methods = ['POST', 'GET'])
def login():
    user= UserAccountDetails()
    if request.method == 'GET':

        return render_template("login.html")

    user_name = request.form.get('username')
    password = request.form.get('pwd')
    message = 'Welcome' # Create empty message
    print("------------------------")
    print(recaptcha)
    #if request.method == 'POST': # Check to see if flask.request.method is POST
    if recaptcha.verify(): # Use verify() method to see if ReCaptcha is filled out
        message = 'Thanks for filling out the form!' # Send success message


    if user.user_login(user_name,password) == True:

        message = "Login successful"

        token_manager = TokenManager()

        token = token_manager.create_token(user_name,password)
        user_agent = request.headers['User-Agent']

        token_manager.store_token(token, user_name, user_agent)
        message = "Login successful"
        return render_template("login.html",myToken = token)

    else:
        abort(403)
        return make_response(alert(response))

# remember to add log out button that deletes token
@app.route('/dashboard', methods=['GET','POST'])
@decorators.token_required

def dashboard(*args):

    headers = {'Content-Type': 'text/html'}
    token=request.args.get('myToken')

    if manager_token(token):
        return render_template('management_options.html', myToken=token)

    else:
        return make_response(render_template('user_dashboard.html'), 200, headers)

@app.route('/user_dashboard', methods = ['GET'])
@decorators.token_required
def show_userdashboard(*args):
    print("user list called")
    return render_template('user_dashboard.html')

@app.route('/user_dashboard/account_details', methods = ['GET'])
@decorators.token_required
def show_account_details(*args):
    print("account details called")
    return render_template('user_account_details.html')

@app.route('/user_dashboard/vulnerability', methods = ['GET'])
@decorators.token_required
def show_dashboard_vuln(*args):
    return render_template('user_dashboard_vuln.html')

@app.route('/user_dashboard/component', methods = ['GET'])
@decorators.token_required
def show_dashboard_comp(*args):
    return render_template('user_dashboard_comp.html')

@app.route('/user_dashboard/project', methods = ['GET'])
@decorators.token_required
def show_dashboard_proj(*args):
    return render_template('user_dashboard_proj.html')


@app.route('/user_dashboard/project/projects', methods = ['GET'])
@decorators.token_required
def get_projects_page(token, username):

    component_name = ComponentManager()
    page = request.args.get('page')
    pagesize = 10
    readable_page = component_name.fetch_projects_page(page, pagesize, username)
    pprint(readable_page)

    return make_response(jsonify(readable_page),200)

@app.route('/user_dashboard/project/new_project', methods = ['POST'])
@decorators.token_required
def create_new_project(token, username):
    project_name = request.form.get('project_name')
    new_project = ComponentManager()
    message = new_project.create_project(username, project_name)
    return make_response(message)

@app.route('/user_dashboard/project/delete_project', methods = ['POST'])
@decorators.token_required
def delete_project(token, username):
    project_name = request.form.get('del_project_name')
    delete_project = ComponentManager()
    print("U"+username)
    print(project_name)
    message = delete_project.delete_project(username, project_name)
    return make_response(message)

@app.route('/user_dashboard/component/new_component', methods = ['POST'])
@decorators.token_required
def create_new_component(token, username):
    project_name = request.form.get('project_name')
    component_name = request.form.get('component_name')
    component_type = request.form.get('component_type')
    version = request.form.get('version')
    new_component = ComponentManager()
    print("U: "+username)
    print("P: "+project_name)
    print("N: "+component_name)
    print("T: "+component_type)
    print("V: "+version)
    message = new_component.create_component(project_name, component_name, component_type, version, username)
    return make_response(message)

@app.route('/user_dashboard/component/delete_component', methods = ['POST'])
@decorators.token_required
def delete_component(token, username):
    project_name = request.form.get('del_project_name')
    component_name = request.form.get('del_component_name')
    new_component = ComponentManager()
    print("P: "+project_name)
    print("N: "+component_name)
    message = new_component.delete_component(project_name, component_name, username)
    return make_response(message)

@app.route('/user_dashboard/vulnerability/vulnerabilities', methods = ['GET'])
@decorators.token_required
def get_vulnerabilities_page(token, username):

    component_name = ComponentManager()
    project_name = request.args.get('user_vuln_project')
    print(project_name)
    page = request.args.get('page')
    pagesize = 10

    readable_page = component_name.fetch_vulnerabilities_page(page, pagesize, project_name)
    pprint(readable_page)

    return make_response(jsonify(readable_page),200)



@app.route('/manage/option', methods = ['POST'])
@decorators.manager_token_required
def select_management_option(token, username):

    if request.method == "GET":

        print("The token in GET form is {}".format(token))
        message = "Welcome to Management options"
        return render_template("management_options.html", myToken = token,message = message)

    operation = request.form.get('operation')
    user_name = request.form.get('username')

    if operation == "delete":
        user = UserAccountDetails()
        #render for to take in delete
        message = user.delete_user(user_name)
        print(message)
        return make_response(jsonify(message),200)
    elif operation == "change_to_user":
        user = UserAccountDetails()
        message = user.change_to_user(user_name)
        print(message)
        return make_response(jsonify(message),200)
    elif operation == "change_to_manager":
        user = UserAccountDetails()
        message = user.change_to_manager(user_name)
        print(message)
        return make_response(jsonify(message),200)

@app.route('/manage/dashboard', methods = ['GET'])
@decorators.manager_token_required
def show_manager_dashboard_(*args):
    return render_template('manager_dashboard.html')

@app.route('/manage/dashboard/vulnerability', methods = ['GET'])
@decorators.manager_token_required
def show_manager_dashboard_vuln(*args):
    return render_template('manager_dashboard_vuln.html')

@app.route('/manage/dashboard/component', methods = ['GET'])
@decorators.manager_token_required
def show_manager_dashboard_comp(*args):
    return render_template('manager_dashboard_comp.html')

@app.route('/manage/dashboard/project', methods = ['GET'])
@decorators.manager_token_required
def show_manager_dashboard_proj(*args):
    return render_template('manager_dashboard_proj.html')




@app.route('/manage/dashboard/project/projects', methods = ['GET'])
@decorators.manager_token_required
def get_manager_projects_page(token, username):

    component_name = ComponentManager()
    page = request.args.get('page')
    pagesize = 10
    readable_page = component_name.fetch_projects_page(page, pagesize, username)
    pprint(readable_page)

    return make_response(jsonify(readable_page),200)
@app.route('/manage/dashboard/project/new_project', methods = ['POST'])
@decorators.manager_token_required
def create_new_manager_project(token, username):
    project_name = request.form.get('project_name')
    new_project = ComponentManager()
    print("U"+username)
    print(project_name)
    message = new_project.create_project(username, project_name)
    return make_response(message)

@app.route('/manage/dashboard/project/delete_project', methods = ['POST'])
@decorators.manager_token_required
def delete_manager_project(token, username):
    project_name = request.form.get('del_project_name')
    delete_project = ComponentManager()
    print("U"+username)
    print(project_name)
    message = delete_project.delete_project(username, project_name)
    return make_response(message)




@app.route('/manage/dashboard/vulnerability/vulnerabilities', methods = ['GET'])
@decorators.manager_token_required
def get_manager_vulnerabilities_page(token, username):

    component_name = ComponentManager()
    project_name = request.args.get('project_vulns')
    print(project_name)
    page = request.args.get('page')
    pagesize = 10

    readable_page = component_name.fetch_vulnerabilities_page(page, pagesize, project_name)
    pprint(readable_page)

    return make_response(jsonify(readable_page),200)





@app.route('/manage/dashboard/component/new_component', methods = ['POST'])
@decorators.manager_token_required
def create_new_manager_component(token, username):
    project_name = request.form.get('project_name')
    component_name = request.form.get('component_name')
    component_type = request.form.get('component_type')
    version = request.form.get('version')
    new_component = ComponentManager()
    print("U: "+username)
    print("P: "+project_name)
    print("N: "+component_name)
    print("T: "+component_type)
    print("V: "+version)
    message = new_component.create_component(project_name, component_name, component_type, version, username)
    return make_response(message)

@app.route('/manage/dashboard/component/delete_component', methods = ['POST'])
@decorators.manager_token_required
def delete_manager_component(token, username):
    project_name = request.form.get('del_project_name')
    component_name = request.form.get('del_component_name')
    new_component = ComponentManager()
    print("P: "+project_name)
    print("N: "+component_name)
    message = new_component.delete_component(project_name, component_name, username)
    return make_response(message)





@app.route('/user_list', methods = ['GET'])
@decorators.manager_token_required
def show_userlist(*args):
    print("user list called")
    return render_template('user_list.html')

@app.route('/user_list/show', methods = ['GET'])
@decorators.manager_token_required
def get_db_page(*args):

    user_acc = UserAccountDetails()
    page = request.args.get('page')
    pagesize = 10

    readable_page = user_acc.fetch_userlist_page(page, pagesize)
    pprint(readable_page)

    return make_response(jsonify(readable_page),200)

@app.route('/invalid_token', methods = ['GET'])
def delete_token():
    return render_template('invalid_token.html')

@app.route('/manage/account_details', methods = ['GET'])
@decorators.manager_token_required
def show_manager_account_details(*args):
    print("account details called")
    return render_template('manager_account_details.html')

@app.route('/changepass', methods = ['POST'])
@decorators.token_required
def change_password(token, username):
    #'user_name, new_password'user_name = request.args.get('username')
    new_password = request.form.get('new_password')
    confirm_password = request.form.get('confirm_password')
    user = UserAccountDetails()
    message = user.change_password(username, new_password, confirm_password)
    return make_response(jsonify(message),200)

if __name__ == "__main__":
    app.run(debug= True, host = '0.0.0.0', ssl_context = ('certs/pub_cert.pem', 'certs/priv_key.pem'))
