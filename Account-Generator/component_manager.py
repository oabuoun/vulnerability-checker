from user_account_details import UserAccountDetails

class ComponentManager:
    #manages projects and components

    def check_comp_exists(project_name, comp_name):

        #obtain project id from project table
        db = ProjectDB("project_db")
        cursor = db.cursor

        command = "SELECT * FROM component_table WHERE `project_name` = {} AND `component_name` = {}".format(project_name, component_name)
        cursor.execute(command)
        cursor.fetchone()

        num_occurences = cursor.rowcount

        if num_occurences > 0:
            return True
        else:
            return False


    def check_project_exists(project_name):

        #check for project name in project table
        db = ProjectDB("project_db")
        cursor = db.cursor

        command = "SELECT * FROM project_table WHERE `project_name` = {}".format(project_name)
        cursor.execute(command)
        cursor.fetchone()
        num_occurences = cursor.rowcount
        db.close_down()

        #control flow for output
        if num_occurences > 0:
            return True
        else:
            return False

    def deletion_permitted(username, project_name):
        user = UserAccountDetails()
        if user.check_admin(username) == True:
            return True
        else:
            db = ProjectDB()
            cursor = db.cursor


            command = "SELECT * FROM `project_table` WHERE `project_name`='{}';".format(project_name)
            cursor.execute(command)
            cursor.fetchone()

            if cursor['created_by'] == username):
                db.close_down
                return True
            else:
                db.close_down
                return False

    def create_project(username, project_name):

        #check if project exists
        db = ProjectDB()
        cursor = db.cursor
        # if not, construct sql query and execute
        if self.check_project_exists(project_name) == True:
            return "Project Name already taken"

        #project name not taken, create project
        db = ProjectDB("project_db")
        cursor = db.cursor

        #TODO: SQL
        command = "INSERT INTO table_name (`project_name`,`created_by`) VALUES ({},{});".format(project_name, username)
        cursor.execute(command)
        db.connection.commit()
        db.close_down()

        #now check that the project check_comp_exists
        if self.check_project_exists(project_name) == True:
            return "Project successfully created"
        else:
            return "An error has occured"


    def delete_project(username, project_name):

        if self.deletion_permitted(username, project_name) == True:
            return " You do not have permission to delete this project."
        elif check_project_exists(project_name) == False:
            return "This project does not exist."

        db = ProjectDB("project_db")
        cursor = db.cursor
        #check permission


        command = "DELETE FROM vuln_table WHERE `project_name` = '{}'".format(project_name)
        #need to scrub vuln_table
        cursor.execute(command)
        db.connecton.commit()

        command = "DELETE FROM comp_table WHERE `project_name` = '{}'".format(project_name)
        #need to scrub component_table
        cursor.execute(command)
        db.connection.commit()
        #construct sql query and delete all entries with matchign project id
        #then delete project from project table
        command = "DELETE FROM project_table WHERE `project_name` = '{}'".format(project_name)
        cursor.execute(command)
        db.connection.commit()

        #confirm delete was successful
        if check_project_exists(project_name) == False:
            return "Project successfully deleted"
        else:
            return "An error has occured"


    def create_component(project_name, comp_name, comp_type, comp_version):

        if self.check_comp_exists(project_name, comp_name) == True:
            return ("Component name is already taken")

        db = ProjectDB("project_db")
        cursor = db.cursor

        #TODO: SQL
        command = "INSERT INTO table_name (`project_name`,`comp_name`, `comp_type`, `comp_version`) VALUES ({},{},{},{});".format(project_name, comp_name, comp_type, comp_version)
        cursor.execute(command)
        db.connection.commit()
        db.close_down()

        #check component now exists
        if self.check_comp_exists(project_name, comp_name) == True:
            return "Component '{}' successfully created".format(comp_name)
        else:
            return "An error has occurred"


    def delete_component(username, project_name, comp_name):

        if self.alter_permitted(username, project_name):
            db = ProjectDB("project_db")
            cursor = db.cursor
            #scrub vuln_table for any vulns associated with this component
            command = "DELETE * FROM `comp_table` WHERE `project_name` = '{}' AND `comp_name` = '{}';".format(project_name,comp_name)"
            cursor.execute(command)
            db.connection.commit()

            #now delete the component
            command = "DELETE * FROM comp_table WHERE `project_name` = '{}' AND `comp_name` = '{}';".format(project_name,comp_name)
            cursor.execute(command)
            db.connection.commit()

        else:
            return "You do not have permission to delete this component"


    def alter_permitted(username, project_name):
        db = ProjectDB()
        cursor = db.cursor

        command = "SELECT `created_by` FROM `project_table` WHERE `project_name`='{}';".format(project_name)
        #here: extract VALUES
        cursor.execute(command)
        cursor.fetchone()

        if cursor['created_by'] == username):
            db.close_down
            return True
        else:
            db.close_down
            return False
