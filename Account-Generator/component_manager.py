from user_account_details import UserAccountDetails
from sql_init import ProjectDB

class ComponentManager:
    #manages projects and components

    def check_comp_exists(self,project_name, comp_name):

        #obtain project id from project table
        db = ProjectDB()
        cursor = db.cursor

        command = "SELECT * FROM comp_table WHERE `project_name` = '{}' AND `comp_name` = '{}';".format(project_name, comp_name)
        cursor.execute(command)
        cursor.fetchone()

        num_occurences = cursor.rowcount

        if num_occurences > 0:
            return True
        else:
            return False


    def check_project_exists(self,project_name):

        #check for project name in project table
        #print("started check_project_exists, {}".format(project_name))
        db = ProjectDB()
        #print("db created")
        cursor = db.cursor
        #print("cursor created")

        command = "SELECT * FROM project_table WHERE `project_name` = '{}';".format(project_name)
        #print("command created in project existence check")
        cursor.execute(command)
        #print("command executed")
        cursor.fetchone()
        num_occurences = cursor.rowcount
        db.close_down()
        print(num_occurences)
        #control flow for output
        if num_occurences > 0:
            print("project exists")
            return True
        else:
            print("project doesn't exist")
            return False

    def deletion_permitted(self,username, project_name):
        user = UserAccountDetails()
        if user.check_user_privilege(username) == True:
            return True
        else:
            db = ProjectDB()
            cursor = db.cursor


            command = "SELECT * FROM `project_table` WHERE `project_name`='{}';".format(project_name)
            cursor.execute(command)
            output = cursor.fetchall()

            if output[0][2] == username:
                db.close_down()
                return True
            else:
                db.close_down()
                return False

    def create_project(self,username, project_name):

        if self.check_project_exists(project_name) == True:
            return "Project Name already taken"

        #project name not taken, create project
        print("creating new project")
        db = ProjectDB()

        cursor = db.cursor

        #TODO: SQL
        command = "INSERT INTO `project_table` (`project_name`,`created_by`) VALUES ('{}','{}');".format(project_name, username)
        cursor.execute(command)
        db.connection.commit()
        db.close_down()

        #now check that the project check_comp_exists
        if self.check_project_exists(project_name) == True:
            return "Project successfully created"
        else:
            return "An error has occured"



    def delete_project(self,username, project_name):

        if self.deletion_permitted(username, project_name) != True:
            return " You do not have permission to delete this project."
        elif self.check_project_exists(project_name) == False:
            return "This project does not exist."

        db = ProjectDB()
        cursor = db.cursor
        #check permission


        command = "DELETE FROM vuln_table WHERE `project_name` = '{}';".format(project_name)
        #need to scrub vuln_table
        cursor.execute(command)
        db.connection.commit()

        command = "DELETE FROM comp_table WHERE `project_name` = '{}';".format(project_name)
        #need to scrub
        cursor.execute(command)
        db.connection.commit()
        #construct sql query and delete all entries with matchign project id
        #then delete project from project table
        command = "DELETE FROM project_table WHERE `project_name` = '{}';".format(project_name)
        cursor.execute(command)
        db.connection.commit()

        #confirm delete was successful
        if self.check_project_exists(project_name) == False:
            return "Project successfully deleted"
        else:
            return "An error has occured"


    def create_component(self,project_name, comp_name, comp_type, comp_version, username):

        if self.alter_permitted(username, project_name) == False:
            return "You do not have permission to alter this project"

        if self.check_comp_exists(project_name, comp_name) == True:
            return "Component name is already taken"


        db = ProjectDB()
        cursor = db.cursor

        #TODO: SQL
        command = "INSERT INTO comp_table (`project_name`,`comp_name`, `comp_type`, `comp_version`) VALUES ('{}','{}','{}','{}');".format(project_name, comp_name, comp_type, comp_version)
        cursor.execute(command)
        db.connection.commit()
        db.close_down()

        #check component now exists
        if self.check_comp_exists(project_name, comp_name) == True:
            return "Component '{}' successfully created".format(comp_name)
        else:
            return "An error has occurred"


    def delete_component(self,username, project_name, comp_name):

        if self.alter_permitted(username, project_name):
            db = ProjectDB()
            cursor = db.cursor
            #scrub vuln_table for any vulns associated with this component
            command = "DELETE FROM `comp_table` WHERE `project_name` = '{}' AND `comp_name` = '{}';".format(project_name,comp_name)
            cursor.execute(command)
            db.connection.commit()

            #now delete the component
            command = "DELETE FROM comp_table WHERE `project_name` = '{}' AND `comp_name` = '{}';".format(project_name,comp_name)
            cursor.execute(command)
            db.connection.commit()

        else:
            return "You do not have permission to delete this component"


    def alter_permitted(self,username, project_name):
        db = ProjectDB()
        cursor = db.cursor
        print(project_name)

        command = "SELECT * FROM `project_table` WHERE `project_name`='{}';".format(project_name)
        #here: extract VALUES
        cursor.execute(command)
        #db.connection.commit()
        output = cursor.fetchall()

        if output[0][2] == username:
            db.close_down
            return True
        else:
            db.close_down
            return False


    def lookup_components(self,project_name):
        db = ProjectDB()
        cursor = db.cursor

        command = "SELECT * FROM `comp_table` WHERE `project_name`='{}';".format(project_name)

        cursor.execute(command)
        project_comps = cursor.fetchall()

        db.close_down()

        output_list = []

        for component in project_comps:
            print(component[2])
            print(component[4])
            output_list.append(component[2] + " " + component[4])


        return output_list

    def fetch_vulnerabilities_page(self, page, pagesize):
        #start by opening sql database
        db = ProjectDB()
        cursor = db.cursor
        print(page, pagesize)
        gather_command = "SELECT `comp_name`, `CVE_id`, `Description`, FROM `vuln_table` ORDER BY `CVE_id` LIMIT {} OFFSET {}".format(pagesize, (int(page) - 1)*pagesize)
        cursor.execute(gather_command)
        row_headers=[x[0] for x in cursor.description] #this will extract row headers
        page = cursor.fetchall()
        json_page = []
        #readable_page.insert(0,(row_headers[0],row_headers[1],row_headers[2]))
        #db.close_down()
        for result in page:
            json_page.append(dict(zip(row_headers,result)))
        print("HEADERS", row_headers)
        print(json_page)
        return json_page


    def fetch_projects_page(self, page, pagesize):
        #start by opening sql database
        db = ProjectDB()
        cursor = db.cursor
        print(page, pagesize)
        gather_command = "SELECT `project_name` FROM `project_table` ORDER BY `project_name` LIMIT {} OFFSET {}".format(pagesize, (int(page) - 1)*pagesize)
        cursor.execute(gather_command)
        row_headers=[x[0] for x in cursor.description] #this will extract row headers
        page = cursor.fetchall()
        json_page = []
        #readable_page.insert(0,(row_headers[0],row_headers[1],row_headers[2]))
        #db.close_down()
        for result in page:
            json_page.append(dict(zip(row_headers,result)))
        print("HEADERS", row_headers)
        print(json_page)
        return json_page





if __name__ == "__main__":
    print("Testing")

    username = "jamesdidit72"
    project_name = "test"
    comp_name = "test_component"
    comp_type = "comp_type"
    comp_version = "comp_version"
    comp_version = "comp_version"




    comp_man = ComponentManager()
    print(comp_man.create_project(username, project_name))
    print("project creation done")
    print(comp_man.create_component(project_name, comp_name, comp_type, comp_version, username))
    #
    print(comp_man.create_component(project_name, "test_2", comp_type, comp_version, username))
    print(comp_man.lookup_components(project_name))
    # print(comp_man.delete_component("username", project_name, comp_name))
    # print(comp_man.delete_component(username, project_name, comp_name))
    # print(comp_man.delete_component(username, project_name, comp_name))
    #
    # print(comp_man.delete_project("kai", project_name)) #return "not allowed"
    # print(comp_man.delete_project(username, project_name))
    # print(comp_man.delete_project(username, project_name)) #return "not existent"
